import socket, threading, time
from scapy.all import *
from Queue import Queue


class Portscanner():
    
    __slots__=['__host', '__queue', '__opened_ports', '__filtered_ports', '__print_lock']

    def __init__(self, host):
        self.__host = host
        self.__queue = Queue()
        self.__opened_ports = []
        self.__filtered_ports = []
        self.__print_lock = threading.Lock()
        
    def run(self):
        for port in range(1, 1001):
            self.__queue.put(port)
            
        for x in range(255):
            threader = threading.Thread(target=self.start)
            threader.daemon = True
            threader.start()
        
        self.__queue.join()
        
        print("Ports Opened: " + str(self.__opened_ports) + "\n")
        print("Ports Filtered: " + str(self.__filtered_ports) + "\n")

    def scan(self, port):
        '''s = socket.socket(socket.AF_INET, socket. SOCK_STREAM)
        s.settimeout(1)
        try:
            con = s.connect((self.__host, port))
            with self.__print_lock:
                print('Port' + ' ' + str(port) + ' ' + 'is opened.')
                time.sleep(0)
                self.__opened_ports.append(port)
            con.close()
        except:
            with self.__print_lock:
                a = "a"'''
                
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        status = s.connect_ex((self.__host, port))
        
        src_port = RandShort()
        
        if status == 0:
            print('Port' + ' ' + str(port) + ' ' + 'is opened.')
            self.__opened_ports.append(port)
        else:
            respAck = sr1( IP(dst=self.__host) / TCP(sport=src_port, dport=int(port), flags="A"), timeout=1, verbose=0)
            if (respAck == None): 
                #print('Port' + ' ' + str(port) + ' ' + 'is filtered.')
                self.__filtered_ports.append(port)

    def start(self):
        while True:
            port = self.__queue.get()
            self.scan(port)
            self.__queue.task_done()




